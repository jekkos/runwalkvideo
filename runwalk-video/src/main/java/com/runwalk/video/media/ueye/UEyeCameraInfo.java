package com.runwalk.video.media.ueye;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Native;

import java.util.Arrays;
import java.util.List;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class UEyeCameraInfo extends Structure {
	/** <! \brief this is the user definable camera ID */
	public int dwCameraID;
	/** <! \brief this is the systems enumeration ID */
	public int dwDeviceID;
	/** <! \brief this is the sensor ID e.g. IS_SENSOR_UI141X_M */
	public int dwSensorID;
	/** <! \brief flag, indicates whether the camera is in use or not */
	public int dwInUse;
	/**
	 * <! \brief zero terminated serial number string<br>
	 * C type : IS_CHAR[16]
	 */
	public byte[] SerNo = new byte[16];
	/**
	 * <! \brief zero terminated short model name string<br>
	 * C type : IS_CHAR[16]
	 */
	public byte[] Model = new byte[16];
	/** <! \brief various flags with camera status */
	public int dwStatus;
	/**
	 * <! \brief reserved<br>
	 * C type : DWORD[2]
	 */
	public int[] dwReserved = new int[2];
	/**
	 * <! \brief zero terminated full model name string,<br>
	 * \note Use this string for display purpose only!<br>
	 * Do not depend on the contents of this string!<br>
	 * C type : IS_CHAR[32]
	 */
	public byte[] FullModelName = new byte[32];
	/**
	 * <! \brief reserved<br>
	 * C type : DWORD[5]
	 */
	public int[] dwReserved2 = new int[5];
	public UEyeCameraInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("dwCameraID", "dwDeviceID", "dwSensorID", "dwInUse", "SerNo", "Model", "dwStatus", "dwReserved", "FullModelName", "dwReserved2");
	}
	public UEyeCameraInfo(Pointer peer) {
		super(peer);
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected UEyeCameraInfo newInstance() { return new UEyeCameraInfo(); }
	public static class ByReference extends UEyeCameraInfo implements Structure.ByReference {

	};
	public static class ByValue extends UEyeCameraInfo implements Structure.ByValue {

	};
}
